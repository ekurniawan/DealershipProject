@page "/login"
@using DealershipProject.Shared.Models
@using DealershipProject.Shared.Services
@inject IAuthService AuthService
@inject ILoginService LoginService
@inject AuthStateService AuthStateService
@inject NavigationManager Navigation

<h3>Login</h3>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3 class="text-center">Login</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@loginRequest" OnValidSubmit="@HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" />
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="loginRequest.Email" />
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="loginRequest.Password" />
                    </div>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success" role="alert">
                            @successMessage
                        </div>
                    }
                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary" disabled="@isLoading">
                            @(isLoading ? "Logging in..." : "Login")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>  


@code {
    private LoginRequest loginRequest = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isLoading = false;

    protected async override Task OnInitializedAsync()
    {
        var token = await AuthService.GetTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            Navigation.NavigateTo("/cars");
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        try
        {
            var response = await LoginService.LoginAsync(loginRequest);
            if (response.Success && !string.IsNullOrEmpty(response.Token))
            {
                await AuthService.SetTokenAsync(response.Token);
                await AuthService.SetEmailAsync(response.Email);

                AuthStateService.NotifyAuthStateChanged();
                successMessage = "Login successful! Redirecting...";
                await Task.Delay(1000); // Simulate a delay for better UX   
                Navigation.NavigateTo("/cars");
            }
            else
            {
                errorMessage = response.Message ?? "Login failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
